#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('new_gallows:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

// socket.io section
// socket.io vars
var config = require('../config');
var async = require('async');
var cookie = require('cookie');
var sessionStore = require('../libs/sessionStore');
var HttpError = require('../error').HttpError;
var User = require('../models/user').User;
cookieParser = require("cookie-parser");

var io = require('socket.io').listen(server);
io.set('origins', 'localhost:*');

function loadSession(sid, callback) {

  // sessionStore callback is not quite async-style!
  sessionStore.load(sid, function(err, session) {
    if (arguments.length == 0) {
      // no arguments => no session
      return callback(null, null);
    } else {
      return callback(null, session);
    }
  });

}

function loadUser(session, callback) {

  if (!session.user) {
    return callback(null, null);
  }

  User.findById(session.user, function(err, user) {
    if (err) return callback(err);

    if (!user) {
      return callback(null, null);
    }
    callback(null, user);
  });

}

io.set('authorization', function(handshake, callback) {
  async.waterfall([
    function(callback) {
        // сделать handshakeData.cookies - объектом с cookie
        handshake.cookies = cookie.parse(handshake.headers.cookie || '');
        var sidCookie = handshake.cookies[config.get('session:key')];
        var sid = cookieParser.signedCookie(sidCookie, config.get('session:secret'));

        loadSession(sid, callback);
      },
      function(session, callback) {

        if (!session) {
          callback(new HttpError(401, "No session"));
        }

        handshake.session = session;
        loadUser(session, callback);
      },
      function(user, callback) {
        if (!user) {
          callback(new HttpError(403, "Anonymous session may not connect"));
        }

        handshake.user = user;
        callback(null);
      }

      ], function(err) {
        if (!err) {
          return callback(null, true);
        }

        if (err instanceof HttpError) {
          return callback(null, false);
        }

        callback(err);
      });
});

/*
function loadSession(sid, callback) {
  sessionStore.load(sid, function (err, session) {
    if (arguments.length == 0) return callback(null, null);

    return callback(null, session);
  });
}

function loadUser (session, callback) {
  if (!session.user) {
    return callback(null, null);
  }

  User.findById(session.user, function (err, user) {
    if (err) return callback (err);

    if (!user) return callback(null, null);

    callback(null, user);
  });
}

io.set('authorization', function(handshake, callback) {
  async.waterfall([
    function(callback) {
      handshake.cookies = cookie.parse(handshake.headers.cookie || '');
      var sidCookie = handshake.cookies[config.get('session:key')];
      var sid = cookieParser.signedCookie(sidCookie, config.get('session:secret'));

      loadSession(sid, callback);
    },
    function (session, callback) {
      if (!session) callback(new HttpError(401, "No session"));

      handshake.session = session;
      loadUser(session, callback);
    },
    function(user, callback) {
      if (!user) callback(new HttpError(403, "Anonymous session may not connect"));

      handshake.user = user;
      console.log(user);
      callback(null);
    }
  ], function (err) {
    if (!err) return callback(null, true);

    if (err instanceof HttpError) {
      return callback (null, false);
    }

    callback(err);
  })
});
*/

io.on('connection', function (socket) {
  if (socket.request.user) {
    var username = socket.request.user.username
  } else {
    var username = 'анонім';
  };

  socket.broadcast.emit('join', username);

  socket.on('message', function (text, cb) {
    socket.broadcast.emit('message', username, text);
    cb && cb();
  });

  socket.on('disconnect', function () {
    socket.broadcast.emit('leave', username);
  });
});
